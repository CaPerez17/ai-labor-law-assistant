#!/usr/bin/env python
"""
Script para verificar la configuraci√≥n de OpenAI

Este script realiza pruebas para verificar:
1. La configuraci√≥n correcta de OpenAI API Key
2. La inicializaci√≥n del servicio AI
3. La validaci√≥n de la API Key
4. Una prueba simple de generaci√≥n
"""

import os
import sys
import logging
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("test_openai")

# Asegurar que el directorio backend est√© en el path
backend_dir = Path(__file__).resolve().parent
if str(backend_dir) not in sys.path:
    sys.path.append(str(backend_dir))

# Importar despu√©s de configurar el path
try:
    from config import OPENAI_API_KEY, GPT_MODEL, validate_config
    from app.services.ai_service import AIService
except ImportError as e:
    logger.error(f"Error importando m√≥dulos: {e}")
    logger.error("Aseg√∫rate de estar ejecutando el script desde el directorio backend/")
    sys.exit(1)

def test_config_validation():
    """Prueba la validaci√≥n de configuraci√≥n"""
    logger.info("üîç Verificando configuraci√≥n de OpenAI...")
    
    result = validate_config()
    
    if result:
        logger.info("‚úÖ Configuraci√≥n de OpenAI validada exitosamente")
    else:
        logger.error("‚ùå Error en la configuraci√≥n de OpenAI")
        logger.info("Revisa los valores en tu archivo .env")
        return False
    
    return True

def test_ai_service():
    """Prueba la inicializaci√≥n del servicio de IA"""
    logger.info("üîç Probando la inicializaci√≥n del servicio de IA...")
    
    try:
        service = AIService()
        logger.info(f"‚úÖ AIService inicializado con modelo: {service.model}")
        return service
    except Exception as e:
        logger.error(f"‚ùå Error al inicializar AIService: {str(e)}")
        return None

def test_api_key_validation(service):
    """Prueba la validaci√≥n de la API key"""
    if not service:
        logger.error("‚ùå No se puede probar la API key sin servicio inicializado")
        return False
        
    logger.info("üîç Verificando validez de la API key...")
    
    try:
        is_valid = service.is_api_key_valid()
        if is_valid:
            logger.info("‚úÖ API key v√°lida y funcional")
            return True
        else:
            logger.error("‚ùå API key inv√°lida o expirada")
            return False
    except Exception as e:
        logger.error(f"‚ùå Error al validar la API key: {str(e)}")
        return False

def test_simple_completion(service):
    """Prueba una generaci√≥n simple para verificar funcionamiento completo"""
    if not service:
        logger.error("‚ùå No se puede probar la generaci√≥n sin servicio inicializado")
        return False
        
    logger.info("üîç Probando generaci√≥n simple con OpenAI...")
    
    try:
        prompt = "Saluda en espa√±ol"
        system_message = "Eres un asistente amigable. Responde brevemente."
        
        response_text, error = service.generate_gpt_response(
            prompt=prompt,
            system_message=system_message,
            max_tokens=50,
            temperature=0.5
        )
        
        if error:
            logger.error(f"‚ùå Error en generaci√≥n: {error}")
            return False
            
        logger.info(f"‚úÖ Generaci√≥n exitosa: '{response_text}'")
        return True
    except Exception as e:
        logger.error(f"‚ùå Error en test de generaci√≥n: {str(e)}")
        return False

def run_all_tests():
    """Ejecuta todas las pruebas y reporta el resultado general"""
    logger.info("üîß Iniciando pruebas de configuraci√≥n de OpenAI")
    logger.info("-" * 60)
    
    tests_results = []
    
    # Prueba 1: Validaci√≥n de configuraci√≥n
    config_valid = test_config_validation()
    tests_results.append(("Validaci√≥n de configuraci√≥n", config_valid))
    
    if not config_valid:
        logger.warning("‚ö†Ô∏è La validaci√≥n de configuraci√≥n fall√≥, las siguientes pruebas pueden fallar tambi√©n")
    
    # Prueba 2: Inicializaci√≥n del servicio
    service = test_ai_service()
    service_init = service is not None
    tests_results.append(("Inicializaci√≥n del servicio", service_init))
    
    if not service_init:
        logger.error("‚ùå No se pudo inicializar el servicio, cancelando pruebas restantes")
        summarize_results(tests_results)
        return False
    
    # Prueba 3: Validaci√≥n de API key
    api_key_valid = test_api_key_validation(service)
    tests_results.append(("Validaci√≥n de API key", api_key_valid))
    
    if not api_key_valid:
        logger.error("‚ùå La API key no es v√°lida, cancelando prueba de generaci√≥n")
        summarize_results(tests_results)
        return False
    
    # Prueba 4: Generaci√≥n simple
    generation_ok = test_simple_completion(service)
    tests_results.append(("Generaci√≥n simple", generation_ok))
    
    # Resumen final
    return summarize_results(tests_results)

def summarize_results(results):
    """Muestra un resumen de los resultados de las pruebas"""
    logger.info("\n" + "-" * 60)
    logger.info("üìã RESUMEN DE PRUEBAS")
    logger.info("-" * 60)
    
    all_passed = True
    
    for name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        if not result:
            all_passed = False
        logger.info(f"{status} - {name}")
    
    logger.info("-" * 60)
    
    if all_passed:
        logger.info("üéâ ¬°Todas las pruebas pasaron! OpenAI est√° configurado correctamente.")
    else:
        logger.info("‚ö†Ô∏è Algunas pruebas fallaron. Revisa los errores y ajusta la configuraci√≥n.")
    
    return all_passed

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 