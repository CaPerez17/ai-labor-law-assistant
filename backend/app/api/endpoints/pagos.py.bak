from fastapi import APIRouter, Depends, HTTPException, status, Request, Header
from sqlalchemy.orm import Session
from typing import Optional

from app.core.auth import get_current_user
from app.db.session import get_db
from app.models.usuario import Usuario
from app.services.pago_service import PagoService

router = APIRouter()
pago_service = PagoService()

@router.post("/crear-sesion/{factura_id}")
async def crear_sesion_pago(
    factura_id: int,
    current_user: Usuario = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Crea una sesión de pago para una factura específica.
    
    Args:
        factura_id: ID de la factura a pagar
        current_user: Usuario autenticado
        db: Sesión de base de datos
        
    Returns:
        dict: URL de la sesión de pago y ID de sesión
        
    Raises:
        HTTPException: Si la factura no existe o ya está pagada
    """
    return await pago_service.crear_sesion_pago(factura_id, db)

@router.post("/webhook")
async def stripe_webhook(
    request: Request,
    stripe_signature: str = Header(None),
    db: Session = Depends(get_db)
):
    """
    Endpoint para recibir webhooks de Stripe.
    
    Args:
        request: Request de FastAPI
        stripe_signature: Firma del webhook de Stripe
        db: Sesión de base de datos
        
    Returns:
        dict: Confirmación de recepción
        
    Raises:
        HTTPException: Si la firma del webhook es inválida
    """
    if not stripe_signature:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="No se proporcionó la firma de Stripe"
        )

    # Leer el payload del request
    payload = await request.body()
    
    # Verificar la firma del webhook
    event = await pago_service.verificar_webhook(payload, stripe_signature)
    
    # Procesar el evento
    await pago_service.procesar_webhook(event, db)
    
    return {"status": "success"}

@router.get("/verificar/{session_id}")
async def verificar_estado_pago(
    session_id: str,
    current_user: Usuario = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    Verifica el estado de una sesión de pago.
    
    Args:
        session_id: ID de la sesión de Stripe
        current_user: Usuario autenticado
        db: Sesión de base de datos
        
    Returns:
        dict: Estado del pago, monto y fecha de pago
        
    Raises:
        HTTPException: Si la sesión no existe o hay un error
    """
    return await pago_service.verificar_estado_pago(session_id, db) 